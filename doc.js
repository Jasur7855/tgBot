const db = require("./db"); // –ø–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const TelegramBot = require("node-telegram-bot-api");

const token = "7634665312:AAGjsgemDnTE_REi7K2Qkj6f2lp-gWG1_1E";
const bot = new TelegramBot(token, { polling: true });

const userStates = {};

// –ö–Ω–æ–ø–∫–∏ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
const operationsKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "+", callback_data: "+" },
        { text: "-", callback_data: "-" },
        { text: "*", callback_data: "*" },
        { text: "/", callback_data: "/" },
      ],
      [{ text: "–í—Å–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", callback_data: "history" }],
    ],
  },
};

bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  userStates[chatId] = {};
  bot.sendMessage(
    chatId,
    "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    operationsKeyboard
  );
});

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const operation = query.data;

  if (operation === "history") {
    // üß† –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.all(
      `SELECT operation, first_number, second_number, result, created_at
       FROM operations WHERE chat_id = ? ORDER BY created_at DESC`,
      [chatId],
      (err, rows) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏:", err);
          return bot.sendMessage(
            chatId,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏."
          );
        }

        if (rows.length === 0) {
          return bot.sendMessage(
            chatId,
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π."
          );
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        const historyText = rows
          .map(
            (r) =>
              `${r.first_number} ${r.operation} ${r.second_number} = ${r.result} (${r.created_at})`
          )
          .join("\n");

        bot.sendMessage(chatId, `üìú –í–∞—à–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:\n\n${historyText}`);
      }
    );

    return ; // –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
  }

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª–∏ –æ–±—ã—á–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:
  userStates[chatId] = { operation };
  bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ:");
});

bot.on("message", (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º /start –∏ –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
  if (text.startsWith("/")) return;

  const state = userStates[chatId];

  // –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞, –Ω–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ
  if (state?.operation && state.firstNumber === undefined) {
    const num = parseFloat(text);
    if (isNaN(num))
      return bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
    state.firstNumber = num;
    bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ:");
  }
  // –ï—Å–ª–∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ç–æ—Ä–æ–µ –∏ —Å—á–∏—Ç–∞–µ–º
  else if (
    state?.firstNumber !== undefined &&
    state.secondNumber === undefined
  ) {
    const num = parseFloat(text);
    if (isNaN(num))
      return bot.sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
    state.secondNumber = num;

    const { operation, firstNumber, secondNumber } = state;

    let result;
    switch (operation) {
      case "+":
        result = firstNumber + secondNumber;
        break;
      case "-":
        result = firstNumber - secondNumber;
        break;
      case "*":
        result = firstNumber * secondNumber;
        break;
      case "/":
        result =
          secondNumber !== 0
            ? firstNumber / secondNumber
            : "–û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å";
        break;
    }

    const resultMessage = `${firstNumber} ${operation} ${secondNumber} = ${result}`;
    bot.sendMessage(chatId, `–í–∞—à–µ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 
${resultMessage}`);

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.run(
      `INSERT INTO operations (chat_id, operation, first_number, second_number, result)
   VALUES (?, ?, ?, ?, ?)`,
      [chatId, operation, firstNumber, secondNumber, result.toString()],
      (err) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É:", err);
        } else {
          console.log("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö");
        }
      }
    );

    delete userStates[chatId];
  }
});
